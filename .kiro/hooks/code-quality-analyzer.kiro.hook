{
  "enabled": true,
  "name": "Code Quality Analyzer",
  "description": "Monitors source code files for changes and provides intelligent code quality suggestions, focusing on readability, maintainability, and performance improvements while respecting file size limits and language-specific conventions",
  "version": "1",
  "when": {
    "type": "fileEdited",
    "patterns": [
      "**/*.ts",
      "**/*.js",
      "**/*.tsx",
      "**/*.jsx",
      "**/*.py",
      "**/*.java",
      "**/*.cpp",
      "**/*.c",
      "**/*.cs",
      "**/*.go",
      "**/*.rs",
      "**/*.php",
      "**/*.rb",
      "**/*.swift",
      "**/*.kt"
    ]
  },
  "then": {
    "type": "askAgent",
    "prompt": "A source code file has been modified. Please analyze the changed code with surrounding context (up to 300 lines total) and provide focused suggestions for:\n\n1. **Code Quality Improvements**: Identify opportunities to enhance readability, maintainability, and performance\n2. **Code Smells Detection**: Flag potential issues like long methods, duplicate code, or complex conditionals  \n3. **Best Practices**: Suggest language-specific conventions and design patterns\n4. **Maintainability**: Recommend refactoring opportunities that preserve existing behavior\n\n**Analysis Guidelines:**\n- Focus only on the modified sections plus necessary context\n- Adapt suggestions to the specific programming language and its conventions\n- Prioritize depth based on change type (minor formatting vs major logic changes)\n- Skip files over 300 lines or analyze in chunks\n- Provide actionable, specific recommendations\n- Maintain existing functionality while improving code structure\n\n**Output Format:**\n- Brief summary of changes detected\n- Prioritized list of improvement suggestions\n- Code smell alerts (if any)\n- Recommended design patterns or refactoring opportunities\n- Language-specific best practice recommendations"
  }
}